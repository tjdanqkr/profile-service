plugins {
    id 'java'
    id 'org.springframework.boot' version '3.4.5'
    id 'io.spring.dependency-management' version '1.1.7'
    id 'jacoco'
    id 'org.asciidoctor.jvm.convert' version '3.3.2'
}



group = 'com.plus'
version = '0.0.1'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

configurations {
    asciidoctorExt
}

def jacocoDir = layout.buildDirectory.dir("reports/")

private excludedClassFilesForReport(classDirectories) {
    classDirectories.setFrom(
            files(classDirectories.files.collect {
                fileTree(dir: it, exclude: [
                        "**/global/**",
                        "**/*Client*",
                        "**/init/**",
                        "**/Q*",
                        "**/*Dto*",
                        "**/dto/**",
                        "**/*Filter*",
                        "**/*Code*",
                        "**/*Exception*",
                        "**/*Develop*",
                        "**/*Application*",
                        "**/*Config*",
                        "**/*Request*",
                        "**/*Response*",
                ])
            })
    )
}
jacoco {
    toolVersion = "0.8.8"
}

jacocoTestReport {
    dependsOn test
    reports {
        html.required.set(true)
        html.destination jacocoDir.get().file("jacoco/index.html").asFile
    }

    excludedClassFilesForReport(classDirectories)

    finalizedBy 'jacocoTestCoverageVerification'
}

jacocoTestCoverageVerification {
    excludedClassFilesForReport(classDirectories)

    violationRules {
        rule {
            enabled = true
            element = 'CLASS'
            limit {
                counter = 'LINE'
                value = 'COVEREDRATIO'
                minimum = 0.70
            }
        }
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}
jar{
    enabled = false
}

ext {
    snippetsDir = file('build/generated-snippets')
}

dependencies {
    implementation 'com.querydsl:querydsl-jpa:5.1.0:jakarta'
    annotationProcessor "com.querydsl:querydsl-apt:5.1.0:jakarta"
    annotationProcessor "jakarta.annotation:jakarta.annotation-api"
    annotationProcessor "jakarta.persistence:jakarta.persistence-api"

    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-validation'

    compileOnly 'org.projectlombok:lombok'
    runtimeOnly 'com.mysql:mysql-connector-j'

    implementation 'org.flywaydb:flyway-core'
    implementation 'org.flywaydb:flyway-mysql'

    annotationProcessor 'org.projectlombok:lombok'
    asciidoctorExt 'org.springframework.restdocs:spring-restdocs-asciidoctor'
    testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'
    testRuntimeOnly 'com.h2database:h2'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

tasks.named('test') {
    outputs.dir snippetsDir
    useJUnitPlatform()
    finalizedBy 'jacocoTestReport'
}


asciidoctor {
    inputs.dir snippetsDir
    sourceDir = file("src/docs/asciidoc")
    outputDir = file("src/main/resources/static/docs")
    configurations 'asciidoctorExt'
    dependsOn test
    baseDirFollowsSourceFile()
}


bootJar {
    dependsOn asciidoctor
}
